type: edu
files:
- name: src/cinema/Main.java
  visible: true
  text: |
    package cinema;

    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;

    @SpringBootApplication
    public class Main {
        public static void main(String[] args) {
            SpringApplication.run(Main.class, args);
        }
    }
  learner_created: false
- name: build.gradle
  visible: true
  text: |-
    buildscript {
        repositories {
            mavenCentral()
        }
        dependencies {
            classpath "org.springframework.boot:spring-boot-gradle-plugin:$hs.spring.bootVersion"
            classpath "io.spring.gradle:dependency-management-plugin:$hs.spring.dependencyManagementVersion"
        }
    }

    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["src/resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-web'
    }
  learner_created: false
- name: src/resources/application.properties
  visible: true
  text: |-
    server.port=28852
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true
  learner_created: false
- name: test/CinemaTests.java
  visible: false
  text: |-
    import cinema.Main;
    import com.google.gson.Gson;
    import com.google.gson.JsonObject;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.response.HttpResponse;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import java.util.Map;
    import java.util.UUID;

    import static org.hyperskill.hstest.testing.expect.Expectation.expect;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.*;

    public class CinemaTests extends SpringTest {

        private static final String ALREADY_PURCHASED_ERROR_MESSAGE = "The ticket has been already purchased!";
        private static final String OUT_OF_BOUNDS_ERROR_MESSAGE = "The number of a row or a column is out of bounds!";
        private static final String WRONG_TOKEN_ERROR_MESSAGE = "Wrong token!";

        private static final Gson gson = new Gson();

        public CinemaTests() {
            super(Main.class);
        }

        private static void checkStatusCode(HttpResponse resp, int status) {
            if (resp.getStatusCode() != status) {
                throw new WrongAnswer(
                    resp.getRequest().getMethod() + " " +
                        resp.getRequest().getLocalUri() +
                        " should respond with status code " + status + ", " +
                        "responded: " + resp.getStatusCode() + "\n\n" +
                        "Response body:\n\n" + resp.getContent()
                );
            }
        }

        CheckResult testEndpoint() {
            HttpResponse response = get("/seats").send();
            checkStatusCode(response, 200);
            return CheckResult.correct();
        }

        CheckResult testEndpointAvailableSeats() {
            HttpResponse response = get("/seats").send();
            expect(response.getContent()).asJson().check(
                isObject()
                    .value("available_seats",
                        isArray(
                            81,
                            isObject()
                                .value("row", isInteger(i -> i >= 1 && i <= 9))
                                .value("column", isInteger(i -> i >= 1 && i <= 9))
                                .value("price", isInteger(price -> price == 10 || price == 8))
                        )
                    )
                    .value("total_columns", 9)
                    .value("total_rows", 9)
            );
            return CheckResult.correct();
        }

        CheckResult testPurchaseTicket() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", isString())
                        .value("ticket",
                            isObject()
                                .value("row", 1)
                                .value("column", 1)
                                .value("price", 10)
                        )
                );
            return CheckResult.correct();
        }

        CheckResult testErrorMessageThatTicketHasBeenPurchased() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", ALREADY_PURCHASED_ERROR_MESSAGE)
                        .anyOtherValues()
                );
            return CheckResult.correct();
        }

        CheckResult testErrorMessageThatNumbersOutOfBounds() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "10",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );

            response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "10"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );

            response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "-1",
                    "column", "-1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );


            return CheckResult.correct();
        }

        CheckResult testReturnTicket() {

            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", 2,
                    "column", 5
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", isString())
                        .value("ticket",
                            isObject()
                                .value("row", 2)
                                .value("column", 5)
                                .value("price", 10)
                        )
                );

            JsonObject jsonResponse = gson.fromJson(response.getContent(), JsonObject.class);

            String tokenFromResponse = jsonResponse.get("token").getAsString();
            String wrongToken = UUID.randomUUID().toString();

            response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", wrongToken
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("error", WRONG_TOKEN_ERROR_MESSAGE)
                    .anyOtherValues()
            );

            response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", tokenFromResponse
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("returned_ticket",
                        isObject()
                            .value("row", 2)
                            .value("column", 5)
                            .value("price", 10)
                    )
            );

            return CheckResult.correct();
        }

        @DynamicTest
        DynamicTesting[] dynamicTests = new DynamicTesting[]{
            this::testEndpoint,
            this::testEndpointAvailableSeats,
            this::testPurchaseTicket,
            this::testErrorMessageThatTicketHasBeenPurchased,
            this::testErrorMessageThatNumbersOutOfBounds,
            this::testReturnTicket
        };
    }
  learner_created: false
- name: src/cinema/model/Seat.java
  visible: true
  text: |
    package cinema.model;

    public class Seat {
        private int row;
        private int column;
        private int price;

        public Seat(int row, int column) {
            this.row = row;
            this.column = column;
            if (row <= 4) {
                this.price = 10;
            } else {
                this.price = 8;
            }
        }

        public Seat() {
        }

        public int getRow() {
            return row;
        }

        public void setRow(int row) {
            this.row = row;
        }

        public int getColumn() {
            return column;
        }

        public void setColumn(int column) {
            this.column = column;
        }

        public int getPrice() {
            return price;
        }

        public void setPrice(int price) {
            this.price = price;
        }

    }
  learner_created: true
- name: src/cinema/model/Cinema.java
  visible: true
  text: |+
    package cinema.model;

    import cinema.model.Seat;

    import java.util.List;

    public class Cinema {
        private final int total_rows = 9;
        private final int total_columns = 9;
        private List<Seat> available_seats;

        public Cinema() {
        }

        public int getTotal_rows() {
            return total_rows;
        }

        public int getTotal_columns() {
            return total_columns;
        }

        public List<Seat> getAvailable_seats() {
            return available_seats;
        }

        public void setAvailable_seats(List<Seat> available_seats) {
            this.available_seats = available_seats;
        }
    }

  learner_created: true
- name: src/cinema/errors/ControllerExceptionHandler.java
  visible: true
  text: |
    package cinema.errors;

    import cinema.errors.CustomErrorMessage;
    import cinema.errors.RowOrColumnOutOfBounds;
    import org.springframework.http.HttpStatus;
    import org.springframework.http.ResponseEntity;
    import org.springframework.web.bind.annotation.ControllerAdvice;
    import org.springframework.web.bind.annotation.ExceptionHandler;
    import org.springframework.web.context.request.WebRequest;

    @ControllerAdvice
    public class ControllerExceptionHandler {

        @ExceptionHandler(RowOrColumnOutOfBounds.class)
        public ResponseEntity<CustomErrorMessage> handleRowOrColumnOutOfBound(
                RowOrColumnOutOfBounds e, WebRequest request) {
            CustomErrorMessage customErrorMessage = new CustomErrorMessage(e.getMessage());
            return new ResponseEntity<>(customErrorMessage, HttpStatus.BAD_REQUEST);
        }
        @ExceptionHandler(TicketAlreadyPurchased.class)
        public ResponseEntity<CustomErrorMessage>handleTicketAlreadyPurchased(TicketAlreadyPurchased e, WebRequest request){
            CustomErrorMessage customErrorMessage = new CustomErrorMessage(e.getMessage());
            return new ResponseEntity<>(customErrorMessage, HttpStatus.BAD_REQUEST);
        }
    }
  learner_created: true
- name: src/cinema/errors/TicketAlreadyPurchased.java
  visible: true
  text: |
    package cinema.errors;

    public class TicketAlreadyPurchased extends RuntimeException{
        public TicketAlreadyPurchased(String message) {
            super(message);
        }
    }
  learner_created: true
- name: src/resources/static/index.html
  visible: true
  text: |-
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <title>Title</title>
    </head>
    <body>
    <h1>HELLO</h1>
    </body>
    </html>
  learner_created: true
- name: src/cinema/errors/CustomErrorMessage.java
  visible: true
  text: |
    package cinema.errors;

    import java.util.HashMap;

    public class CustomErrorMessage {
    private String error;

        public CustomErrorMessage(String error) {
            this.error = error;
        }

        public String getError() {
            return error;
        }

        public void setError(String error) {
            this.error = error;
        }
    }
  learner_created: true
- name: src/cinema/controller/CinemaController.java
  visible: true
  text: |+
    package cinema.controller;

    import cinema.errors.RowOrColumnOutOfBounds;
    import cinema.errors.TicketAlreadyPurchased;
    import cinema.model.Cinema;
    import cinema.model.Seat;
    import org.springframework.web.bind.annotation.*;

    import java.util.*;

    @RestController
    public class CinemaController {
        private List<Seat> available_seats = new ArrayList<>();
        Cinema cinema = new Cinema();

        public CinemaController() {
            for (int i = 0; i < cinema.getTotal_rows(); i++) {
                for (int j = 0; j < cinema.getTotal_columns(); j++) {
                    available_seats.add(new Seat(i + 1, j + 1));

                }
            }

            cinema.setAvailable_seats(available_seats);
        }

        @GetMapping("/seats")
        public Cinema getSeats() {
            return cinema;
        }

        @PostMapping("/purchase")
        public Seat purchaseTicket(@RequestBody Seat seat) {
            if (seat.getRow() > cinema.getTotal_rows() || seat.getColumn() > cinema.getTotal_columns() || seat.getColumn() <= 0 || seat.getRow() <= 0) {
                throw new RowOrColumnOutOfBounds("The number of a row or a column is out of bounds!");
            }
            for (Seat available_seat : cinema.getAvailable_seats()) {
                if (available_seat.getColumn() == seat.getColumn() && available_seat.getRow() == seat.getRow()) {
                    cinema.getAvailable_seats().remove(available_seat);
                    return available_seat;
                }
            }
            throw new TicketAlreadyPurchased("The ticket has been already purchased!");

        }
    }



  learner_created: true
- name: src/cinema/errors/RowOrColumnOutOfBounds.java
  visible: true
  text: |
    package cinema.errors;

    public class RowOrColumnOutOfBounds extends RuntimeException{
        public RowOrColumnOutOfBounds(String message) {
            super(message);
        }
    }
  learner_created: true
- name: src/cinema/model/Ticket.java
  visible: true
  learner_created: true
- name: src/cinema/errors/WrongToken.java
  visible: true
  learner_created: true
- name: src/cinema/model/ReturnTicket.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/13377#comment
status: Solved
feedback:
  message: Congratulations!
  time: Wed, 13 Jul 2022 18:40:26 UTC
record: 3
